Listas Encadeadas Duplamente:
    - Possui o mesmo princípio de qualquer lista: ordenação e controle de duplicidade
    - Também têm as operações clássicas: percorrer; inserir; remover; alterar; destruir
    - A grande diferença é que existem 2 ponteiros:
        - prox -> que aponta para o próximo elemento da lista. Então, é possível 'caminhar' na lista da esquerda para direita
        - ant -> que aponta para o elemento anterior da lista. Então, é possível 'caminhar' da direita para a esquerda
        - Dessa forma, o struct modifica

//lista simples, circular e pilha
typedef struct no {
    int valor;
    struct no *prox;
} Celula;

//lista dupla
typedef struct noD {
    int valor;
    struct noD *ant; //ponteiro para o elemento anterior
    struct noD *prox;//ponteiro para o próximo elemento
}CelulaD;

Um elemento é composto de no mínimo 3 atributos.

A           B           C           D
. 10 b     a 20 c      b 30 d      c 40 .

                        p

listaD A                            

p = C
p->valor = 30
p->ant   = b  
p->prox  =  d 

p->ant->valor =  20 
p->ant->ant   =  a
p->ant->prox  =  c  

p->prox->valor =  40
p->prox->ant   =  c
p->prox->prox  =  .

//avançar da esquerda para direita: contar, pesquisar e para exibir
for (p = listaD; p != NULL; p = p->prox){
    //INSTRUÇÕES
}

//retroceder da direita para esquerda: contar, pesquisar e para exibir
for (p = listaD; p != NULL; p = p->ant){
    //INSTRUÇÕES
}


=============
//avançar da esquerda para direita parando no último: inserir
for (p = listaD; p->prox != NULL; p = p->prox){

}

//retroceder da direita para esquerda parando no primeiro
for (p = listaD; p->ant != NULL; p = p->ant){

}

====================================================================

Contudo, na lista dupla, o controle da lista pode estar parado em qualquer posição da lista,
dessa forma é preciso trazê-lo para o início da lista

//garantindo que o controle da lista esteja no início
for ( ;lista->ant != NULL; lista = lista->ant);



Vantagens de usar listas duplas:
    - mobilidade na lista, por movimentar da esquerda para direita e da direita para esquerda
    - remoção

A                         C           D
. 10 c                    a 30 d      c 40 .

listaD A    p

p->ant->prox = p->prox;
p->prox->ant = p->ant;
free(p);



p = B
p->valor = 20
p->ant = a 
p->prox = c

p->ant->ant = . 
p->ant->valor = 10
p->ant->prox = b 

p->prox->ant = b
p->prox->valor = 30
p->prox->prox = d


=========================================

A           B           C           D
. 10 b     a 20 x      x 30 d      c 40 .

                        p = C

listaD A                                             X
                                                   b 25 c

                                                    novo = X

p->ant->prox = novo;
novo->ant = p->ant;
p->ant = novo;
novo->prox = p;



A           B           C           D
. 10 b     a 20 c      b 30 d      c 40 .

                                     pR       p

listaD A                                  



X
. 50 .

novo = X









