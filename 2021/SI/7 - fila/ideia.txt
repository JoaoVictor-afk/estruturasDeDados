Fila é uma estrutura de dados abstrata com regras na inserção e na remoção - GARANTE PRIORIDADE DE CHEGADA
    - FIFO - First In, First Out -> Primeiro que entra, primeiro que sai 
    - Ou seja, só há operações de INSERÇÃO no final (tail) da fila e REMOÇÃO no início da fila (head)
    - Para isso, são necessários 2 ponteiros:
        - ponteiro inicio/cabeça (head) -> REMOÇÃO
        - ponteiro fim/rabo (tail) -> INSERÇÃO

    EXEMPLOS:
        - Filas em supermercados (caixas)
        - Filas em atendimentos no geral
        - Filas no sistema operacional, como IMPRESSÃO, etc.

    - Struct de uma FILA é igual ao struct de pilha e listas simples ou circulares

    typedef struct no {
        int codigo;
        struct no *prox;
    } Celula;

    typedef struct {
        Celula *inicio; //ponteiro utilizado para fazer as remoções - indica o elemento mais antigo na estrutura
        Celula *fim;    //ponteiro utilizado para fazer as inserções - indica o elemento mais recente na estrutura
    } Fila;


    Fila inicializar(Fila f) {
        f.inicio = NULL;
        f.fim = NULL;

        return f;
    }

    int main() {
        Celula *lista = NULL;
        Celula *pilha = NULL;
        Celula *listaC = NULL;

        Fila fila1, fila2, fila3;

        fila1 = inicializar(fila1);
        fila2 = inicializar(fila2);
        fila3 = inicializar(fila3);

        //processos de inserção -> um código/valor é inserido no final da fila

        //processos de remoção -> um código/valor é removido da cabeça/início da fila

    }

    Essa dinâmica muda em relação à FILA, pois ela possui 2 PONTEIROS.... Dessa forma, vamos precisar de um 2o struct

    
